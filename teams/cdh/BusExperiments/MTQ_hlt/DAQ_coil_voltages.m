close all;

% Auto-generated by Data Acquisition Toolbox Analog Input Recorder on 03-May-2018 18:26:49

%% Create Data Acquisition Session
% Create a session for the specified vendor.
s = daq.createSession('ni');

%% Set Session Properties
% Set properties that are not using default values.

% Read in the Simulink-generated CSV
filename = 'test_bdot_02-May-2018.csv';
expected_results = csvread(filename, 1, 0);

% The rate is the reciprocal of the difference of the first two points in
% the generated CSV (indices 9 and 8 are used because the first few
% timesteps of the output are of irregular separation
s.Rate = 8000; % 1 / ( expected_results( 9, 1 ) - expected_results( 8, 1 ) );
% and the duration is the last data point from the CSV
s.DurationInSeconds = expected_results( end, 1 );

%% Add Channels to Session
% Add channels and set channel properties, if any.
addAnalogInputChannel(s,'Dev1','ai0','Voltage');

addAnalogInputChannel(s,'Dev1','ai1','Voltage');

addAnalogInputChannel(s,'Dev1','ai4','Voltage');

addAnalogInputChannel(s,'Dev1','ai5','Voltage');

addAnalogInputChannel(s,'Dev1','ai6','Voltage');

addAnalogInputChannel(s,'Dev1','ai2','Voltage');

%% Acquire Data
% Start the session in foreground.
[data, timestamps, starttime] = startForeground(s);

%% Log Data
% Convert the acquired data and timestamps to a timetable in a workspace variable.
ai0 = data(:,1);
ai1 = data(:,2);
ai4 = data(:,3);
ai5 = data(:,4);
ai6 = data(:,5);
ai2 = data(:,6);
DAQ_1 = timetable(seconds(timestamps),ai0,ai1,ai4,ai5,ai6,ai2);

%% Compare against expected 



% % Interpolate the expected results with the timestamps of the measured
% % datapoints
% expected_results_interpolated = interp1(  DAQ_1.Time, expected_results( :, 27:end ), expected_results( :, 1 ) );
% 
% % Compute the absolute and relative difference between
% difference = DAQ_1.Variables - expected_results_interpolated;
% relative_difference = difference ./ expected_results_interpolated;
% 
% % filename = 'test_bdot_02-May-2018.csv';
% % inputDataM = csvread(filename,R1=1,C1=26)
% % diffM = inputDataM .- data;
% % tolerance = .1; 


%% Plot Data
% Plot the acquired data on labeled axes.

expected_results_times = expected_results( :, 1 );
mtq_voltages_expected = expected_results( :, 27:end );

% Plot the measured data
figure;
plot(DAQ_1.Time, DAQ_1.Variables);
ylim( [-10 10] );
title( 'Measured Voltages of Magnetorquer Coils' )
xlabel('Time')
ylabel('Voltage (V)')
legend(DAQ_1.Properties.VariableNames)

% Plot the expected output
figure;
plot( expected_results_times, mtq_voltages_expected);
ylim( [-5 5] );
title( 'Expected magnetorquer voltage readings' )
xlabel('Time')
ylabel('Amplitude (V)')
legend(DAQ_1.Properties.VariableNames)


%% Generate csv file 
header = [
    "Time (ms)"
    "X1 (V)"
    "X2 (V)"
    "Y1 (V)"
    "Y2 (V)"
    "Z1 (V)"
    "Z2 (V)"
];
header = join(header, ',');

fid = fopen( 'output_voltages.csv', 'w' );
fprintf(fid, header + "\n");
fclose(fid);

dlmwrite( 'output_voltages.csv', [timestamps data], 'delimiter', ',' ,'precision', 9, '-append' );
    
%% Clean Up
% Clear the session and channels, if any.

% % (I'm not going to do this here, instead, I'm going to do this at the
% % beginning of the file)
% clear s

