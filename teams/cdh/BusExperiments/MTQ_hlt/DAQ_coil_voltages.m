% Auto-generated by Data Acquisition Toolbox Analog Input Recorder on 03-May-2018 18:26:49

%% Create Data Acquisition Session
% Create a session for the specified vendor.
s = daq.createSession('ni');

%% Set Session Properties
% Set properties that are not using default values.
s.Rate = 1.666667e+04;
s.DurationInSeconds = 5;

%% Add Channels to Session
% Add channels and set channel properties, if any.
addAnalogInputChannel(s,'Dev1','ai0','Voltage');

addAnalogInputChannel(s,'Dev1','ai1','Voltage');

addAnalogInputChannel(s,'Dev1','ai4','Voltage');

addAnalogInputChannel(s,'Dev1','ai5','Voltage');

addAnalogInputChannel(s,'Dev1','ai6','Voltage');

addAnalogInputChannel(s,'Dev1','ai2','Voltage');

%% Acquire Data
% Start the session in foreground.
[data, timestamps, starttime] = startForeground(s);

%% Log Data
% Convert the acquired data and timestamps to a timetable in a workspace variable.
ai0 = data(:,1);
ai1 = data(:,2);
ai4 = data(:,3);
ai5 = data(:,4);
ai6 = data(:,5);
ai2 = data(:,6);
DAQ_1 = timetable(seconds(timestamps),ai0,ai1,ai4,ai5,ai6,ai2);

%% Plot Data
% Plot the acquired data on labeled axes.
plot(DAQ_1.Time, DAQ_1.Variables)
xlabel('Time')
ylabel('Amplitude (V)')
legend(DAQ_1.Properties.VariableNames)

%% Compare against expected 
% csvread (bla)

%% Generate csv file 
% TODO build outputM matrix 
%csvwrite('csv_voltages.dat,'outputM)
header = {
    'Time (ms)',
    'X1 (V)',
    'X2 (V)',
    'Y1 (V)',
    'Y2 (V)',
    'Z1 (V)',
    'Z2 (V)'
};
header = string(header)';
fid = fopen('hil_vals.csv','w');
[~, cols] = size(header);
for i = 1:(cols - 1)
    fprintf(fid, '%s', header(i));
end
fprintf(fid,'%s/n',header(cols));
fclose(fid);
dlmwrite('hil_vals.csv',data,'delimiter',',','precision',9,'-append');

    
%% Clean Up
% Clear the session and channels, if any.
clear s

